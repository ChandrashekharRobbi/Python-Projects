import time
# import webbrowser
import time
import requests 
from tqdm import tqdm
import pyperclip as pypc
from selenium import webdriver
# from IPython.display import display 
from selenium.webdriver.common.by import By
from IPython.display import display, Javascript,HTML, Markdown



class LeetFunction:
    '''
    This function is generated by Chandrashekhar Robbi 😎.
    This function can create the markdown and comment by justing entering your message by calling new function
    If the name entered is correct then it wil give all the description of that problem with images❤️‍🩹
    It has also additional features like as you enter the message and run the cell the comment is automatically gets copied in your clipboard
    the default value for comment is 4 i.e 4*#
    You can change the value by taking whatever number you want
    it has functions like 
    new(string) -> For creating new comment, markdown
    printArr() -> to print the content of the arr
    removeLastelement() -> remove the last element from the list
    removeByUsingIndex(x) -> remove by using index
    makeNullArr() -> to make empty list
    '''
    def __init__(self):
        self.arr = []
        self.delete = False
        print("This Function is Created by Chandrashekhar Robbi.\nNote this function is especially created for my leet code solving purposes \nIt takes name of the problem and return leetcode link and it has features like create array which has markdown, comment and delete after executing and many more :) UPDATE")
        
    def delete_cell_prev(self):
        display(Javascript('''
            var cell_index = IPython.notebook.get_selected_index();
            var prev = cell_index - 1;
            IPython.notebook.delete_cell(prev);
        '''))
        
    def delete_cell_curr(self):
        display(Javascript('''
            var cell_index = IPython.notebook.get_selected_index();
            IPython.notebook.delete_cell(cell_index);
        '''))
        
    def to_markdown(self):
        display(Javascript('''
            IPython.notebook.to_markdown();
        '''))
        
    def jump_to_comment(self):
        display(Javascript('''
            IPython.notebook.select(2).edit_mode();
            IPython.notebook.scroll_to_cell(2);
        '''))
        
    def new(self, s, link=None):
#         hash = "#"*h
        try:
            text = "-".join(s.split(".")[1:][0].split()).lower()
        except:
            text = "-".join(s.split()).lower()
        if link == None:
            link = "https://leetcode.com/problems/"
            leet_link =link + text
        else:
            leet_link = link
        # print(s)

        
#         webbrowser.open_new_tab(leet_link)
        content,name = self.magic_markdown_create(leet_link)
        comment = f"1. ✅ [{s}](#{name.replace(' ','-')})           [<a href='{leet_link}' style='color:black'>Link</a>]"
        print("comment added to list now magic function will show his magic")
        markdown = f"{content}  \n > <font color=\"green\">Leetcode Link to {s} [Link]({leet_link}) <font/> \n\n<hr> \n\n* Approach:\n* Time Complexity $ O() $\n* Space Complexity $ O() $"
        self.to_markdown()
        
        if comment not in self.arr:
            pypc.copy(markdown)
            self.arr.append(comment)
            print("Successfully added to the comment list")
            print(f"Here is the link {leet_link}\nAll the best Chandrashekhar")
        elif self.delete:
            self.delete_cell_prev()
#             self.to_markdown()
#             time.sleep(1)
        else:
            print('It is already in the list')
#             self.to_markdown()
#             time.sleep(1)
#             self.delete_cell_prev()
            
    def printArr(self):
        sum = ""
        for i in range(len(self.arr)):
            if i != len(self.arr) - 1:
                sum += self.arr[i] + "\n"
            else:
                sum += self.arr[i]
            print(i) 
        pypc.copy(sum)
        self.makeNullArr()
        self.delete_cell_prev()
        self.jump_to_comment()
            
    def removeLastelement(self):
        self.arr.pop() 
        self.delete_cell_prev()
        
    def removeByUsingIndex(self, x):
        self.arr.pop(x)
        self.delete_cell_prev()
        
    def makeNullArr(self):
        self.arr = []
#         self.delete_cell_prev()
    def magic_markdown_create(self,link):
        # Set up Chrome options
        chrome_options = webdriver.ChromeOptions()
        # if you want no window extra to open up
#         chrome_options.add_argument("--headless")
#         chrome_options.add_argument("--start-minimized")
        driver = '../chromedriver-win64/chromedriver.exe' # windows
        browser = webdriver.Chrome(executable_path=driver,options=chrome_options)
        browser.minimize_window()
        # fetch the link
        browser.get(link)
        print("Got link fetching now...")
        # get the main element parent of all
        time.sleep(0.5)
        print("web page is loading....")
        time.sleep(2)
        element = browser.find_element(By.XPATH, '//*[@id="qd-content"]/div[1]/div/div/div/div[2]/div/div')
        # unnecessary link
        non_necessary = ['https://leetcode.com/_next/static/images/logo-dark-c96c407d175e36c81e236fcfdd682a0b.png',
                    'https://leetcode.com/_next/static/images/logo-ff2b712834cf26bf50a5de58ee27bcef.png',
                    'https://leetcode.com/_next/static/images/dark-judging-723b3c3e728a574bc2a2d4b89a10d4d7.gif',
                    'https://leetcode.com/_next/static/images/dark-pending-f313d6fe32951fb6b4d48ad3ee4f3821.gif',
                    'https://leetcode.com/_next/static/images/light-judging-9d7b0f1c4035b59af3a7d6ccd8e0ac12.gif',
                     'https://leetcode.com/_next/static/images/light-pending-9c28f1f18993ec103b273778b5f6a648.gif']
        color = {"Easy":"Green", "Medium":"#F1C27B","Hard":"Red"}
        markdown_content = ""
        # extracting name
        print("Exctracting name and number ")
        name_no = browser.find_element(By.XPATH, '//*[@id="qd-content"]/div[1]/div/div/div/div[2]/div/div/div[1]/div/div[1]/div[1]/div/a').text
        # print(name_no)
        markdown_content += f"# {name_no}\n\n"  # Add as a title in markdown
        difficulty = browser.find_element_by_xpath('//*[@id="qd-content"]/div[1]/div/div/div/div[2]/div/div/div[1]/div/div[2]/div[1]').text
        markdown_content += f"## <font color='{color[difficulty]}'>{difficulty}</font>\n\n"  # Assuming it's a subheading, change as needed
        print("Extracting all other details")
        time.sleep(0.8)
        count = 0
        for child in element.find_elements_by_xpath("//*"):
            if child.tag_name == 'p':
                print("Scraping Some Text....")
                markdown_content += f"{child.text}\n\n"
            elif child.tag_name == 'pre':
                print("Scraping Test Cases....")
                markdown_content += f"```\n{child.text}\n```\n\n"
            elif child.tag_name == 'li': #('//*[@id="rootItem"]/li'): 
                if count >= 1:
                    markdown_content += f"* `{child.text}`\n\n"  # Assuming it's a subheading, change as needed
                count += 1
            elif child.tag_name == 'img':
                link = child.get_attribute('src')
                if link not in non_necessary:
                    print("Scraping some exciting pictures...")
                    markdown_content += f"![Image]({link})\n\n"
        # Display the markdown content in Jupyter Notebook
        print("Ohh hooo You can paste now 🥳")
#         py.copy(markdown_content)
        browser.close()
        return markdown_content,name_no
